\documentclass{article}
\usepackage[utf8]{inputenc}
\usepackage{graphicx}
\usepackage {ragged2e}
\usepackage{enumerate}
\usepackage{booktabs}
\usepackage[normalem]{ulem}
\usepackage[Lenny]{fncychap}
\usepackage[spanish]{babel}
\usepackage[labelfont=bf]{caption}
\usepackage{longtable}
\usepackage{float}
\usepackage{amsmath, amsthm, amsfonts, amssymb}
\usepackage{fancyhdr}
\usepackage{geometry}
\geometry{left=2.5cm,right=2.5cm,bottom=3.5cm,top=2cm}
\pagestyle{fancy}
\rhead{\includegraphics[width=2cm, height=2cm]{logo1}}
\lhead{}
\chead{\textbf{UNIVERSIDAD DE EL SALVADOR \\ FACULTAD MULTIDISCIPLINARIA DE OCCIDENTE \\ DEPARTAMENTO DE MATEMÁTICA}}
\lfoot{\textit{CICLO II 2022}}
\rfoot{\textbf{PRÁCTICA 3 y 4 (R)}}
\setlength{\headheight}{60.50525pt}
\renewcommand{\headrulewidth}{1pt}
\renewcommand{\footrulewidth}{0.5pt}

\begin{document}
\SweaveOpts{concordance=TRUE}
\thispagestyle{empty}
\centering{\textbf{UNIVERSIDAD DE EL SALVADOR}}\\
\vspace{1cm}
\centering{\textbf{FACULTAD MULTIDISCIPLINARIA DE OCCIDENTE}}\\
\vspace{1cm}
\begin{figure}[H]
\begin{center}
\includegraphics[width=6cm, height=6cm]{logo1.jpg}
\end{center}
\end{figure}
\vspace{1cm}
\begin{center}
\textbf{PRACTICA 5 DE R}\\
\vspace{2cm}
\textbf{DOCENTE:}\\
\vspace{2cm}
\textbf{LIC. JAIME ISAAC PEÑA}\\
\vspace{2cm}
\textbf{PRESENTADO POR:}\\
\vspace{2cm}
\textbf{CRISTIAN ALBERTO ZALDAÑA ALVARADO}
\end{center}
\newpage
\tableofcontents
\newpage
\SweaveOpts{concordance=TRUE}

\justify

R es un lenguaje de expresiones, en el sentido de que el único tipo de orden que posee es una
función o expresión que devuelve un resultado. Incluso una asignación es una expresión, cuyo
resultado es el valor asignado y que puede utilizarse en cualquier sitio en que pueda utilizarse una
expresión.\\

Las órdenes pueden agruparse entre llaves, {expr\_1;. . .; expr\_m}, en cuyo caso el valor del grupo es
el resultado de la última expresión del grupo que se haya evaluado. Puesto que un grupo es por sí
mismo una expresión, puede incluirse entre paréntesis y ser utilizado como parte de una expresión
mayor. Este proceso puede repetirse si se considera necesario.\\

Las estructuras de control en R son muy similares a las de cualquier lenguaje de programación.

\section{ESTRUCTURA CONDICIONAL: LA ORDEN IF() Y IFELSE().}

La construcción condicional if(), la cual es la más fácil de utilizar tiene alguna de las siguientes
formas:

\begin{itemize}
\item if(condicion) expr
\item if(condicion) expresion1 else expresion2
\end{itemize}

Donde condicion es una expresión que debe producir un valor lógico, y si éste es verdadero,
TRUE ó T, se evalúa expresion1, si es falso, FALSO ó F, y se ha escrito la opción else, que es
opcional, se ejecutará expresion2.\\

Si la expresion1 ó expresion2 son complejas, esto es, tienen más de un comando entonces deben
encerrarse entre llaves {...}\\

A menudo suelen utilizarse los operadores \&\& (AND) y || (OR) en una condicion. En tanto que \&
y | se aplican a todos los elementos de un vector, \&\& y || se aplican a vectores de longitud uno y
sólo evalúan el segundo argumento si es necesario, esto es, si el valor de la condicion completa no
se deduce del primer argumento.

\begin{itemize}
\item Ejemplo 1: if(x>0) y<-1 else y<-0, le asigna a la variable "y" un valor de 1 si x es mayor que 0, en caso contrario le asigna el valor 0.\\
ifelse(prueba, si, no)\\
Donde:
\item prueba: Es un vector lógico o condición lógica a ser evaluada.
\item si: devuelve valores para los elementos ciertos de "prueba".
\item no: devuelve valores para los elementos falsos de "prueba".
\end{itemize}

El uso de if() está limitado a expresiones que no sean vectores. Si estamos evaluando vectores o
matrices entonces lo indicado es hacerlo con ifelse() que devuelve un valor con la misma forma que
el argumento "prueba" el cual es llenado con elementos seleccionados bien sea del argumento "si" o
del argumento "no" dependiendo de si el elemento de "prueba" es "TRUE" O "FALSE", si los
argumentos "si" o "no" son muy cortos, entonces sus elementos son reciclados.\\

Por ejemplo, ejecute las siguientes instrucciones

<<>>=
x <- c(6:-4); x
sqrt(x) # Produce un mensaje de advertencia
sqrt(ifelse(x >= 0, x, NA)) # No produce advertencia
ifelse(x >= 0, sqrt(x), NA) # Produce un mensaje de advertencia
# Comente las diferencias entre cada una de las instrucciones anteriores.
# La diferencia es que para la primer instrucción, la condición se aplica dentro de 
#la reaiz cuadrada, por otro lado en la segunda intrucción se realiza fuera de esta.
@

\section{ESTRUCTURAS ITERATIVAS O DE REPETICIÓN: \newline FOR(), WHILE() Y REPEAT().}

La función for() es una construcción repetitiva que tiene la forma:

\begin{center}
\textbf {for(nombre in expr1) expr2}\\
\end{center}

Donde nombre es la variable de control del número de iteraciones, expr1 es un vector (a menudo
de la forma m:n), y expr2 es una expresión, a menudo agrupada, en cuyas sub-expresiones puede
aparecer la variable de control, expr2 se evalúa repetidamente conforme nombre recorre los valores
del vector expr1.

\begin{itemize}
\item Ejemplo:
<<>>=
x <- c(2, 6, 4, 7, 5, 1)
suma<-0
for(i in 1:3) suma = suma+x[i]
suma
@

\end{itemize}

Nota: En R, la función for() se utiliza mucho menos que en lenguajes tradicionales, ya que no
aprovecha las estructuras de los objetos. El código que trabaja directamente con las estructuras
completas suele ser más claro y más rápido.

Otras estructuras de repetición son:
\begin{itemize}
\item while (condición) expresión
\item repeat expresión
\end{itemize}

La función break() se utiliza para terminar cualquier ciclo. Esta es la única forma (salvo que se
produzca un error) de finalizar un ciclo repeat. La función next() deja de ejecutar el resto de un
ciclo y pasa a ejecutar el siguiente.

\section{FUNCIONES ESCRITAS POR EL USUARIO.}

El lenguaje R permite al usuario definir objetos que sean funciones. Éstas se convierten en
auténticas funciones de R, que se almacenan en una forma interna y se pueden utilizar en
expresiones futuras. Una función en R se puede delinear de la siguiente manera:

\begin{figure}[H]
\begin{center}
\includegraphics[scale=0.5]{funciones.jpg}
\end{center}
\end{figure}

Los argumentos pueden ser objetos ("datos", fórmulas, expresiones, . . . ), algunos de los cuales
pueden ser definidos por defecto en la función; sin embargo, estos argumentos pueden ser
modificados por el usuario con opciones. Una función en R puede carecer totalmente de
argumentos, ya sea porque todos están definidos por defecto (y sus valores son modificados con
opciones), o porque la función realmente no utiliza argumentos.\\

Una función se define por una asignación de la forma\\

\hspace{1cm} nombreFunción <- function(arg1, arg2, . . .) expresión\\

\hspace{2.5cm} return(valor)

Donde: arg1, arg2, . . . : son los argumentos de la función u opciones del tipo opcion=expresión,
una puede no tener argumentos.\\

Expresión: es una expresión en R, si ocupa más de una instrucción estas van encerradas
entre llaves {}, y utiliza los argumentos para calcular su valor. El valor de la expresión es
devuelto como el valor de la función por medio del nombre, o puede utilizar return()
para retornar uno o más valores.\\

valor: es una expresión o una serie de expresiones separadas por comas.

\begin{itemize}
\item Ejemplo 1: Definir en R la función cuadrática $ y = f(x) = 3x^2 -5x +2 $
\end{itemize}
Como nombre de la función podemos usar cualquier palabra (que no sea una palabra reservada por
R, como log o sum) que puede incluir letras y puntos.
Llamémosle func.cuadratica y definámosla de la manera siguiente:

<<>>=
func.cuadratica <- function(x)
{
3*x^2-5*x+2
}
@

Luego, si queremos calcular f(2) simplemente ejecutamos la instrucción:

<<>>=
y <- func.cuadratica(2)
y
@

\textbf{NOTA: Toda función para usarla debe estar cargada en el área de trabajo (Workspace). Es decir,
primero es necesario correr el código necesario el código de la función y asegurarse que no
contenga errores de sintaxis.}
\begin{itemize}
\item Ejemplo 2: Se quiere definir una función para calcular la media de un vector de datos.Una definición podría ser:
\end{itemize}

<<>>=
media <- function(x)
{
n = length(x)
suma <- 0.0
for(i in 1:n) suma = suma + x[i]
media = suma/n
}
@

Guarde este objeto en su directorio de trabajo con la instrucción

<<>>=
save(media, file= "media.RData")
@

Borre todos los objetos del área de trabajo con

<<>>=
#rm(list=ls(all=TRUE))
@

Cargue el objeto con

<<>>=
load("media.RData")
@

Pruebe la función media() con los siguientes vectores:

\begin{itemize}
\item x <- 1:5;(media(x)) (se usa doble paréntesis para que muestre el resultado en pantalla)

<<>>=
x<-1:5
(media(x))
@

\item y <- c(5, NA , 4, 9);(media(y)) (el resultado no puede calcularse pues falta un dato)

<<>>=
y <- c(5, NA , 4, 9)
(media(y))
@

\end{itemize}

Note que al escribir (media), nos muestra el código de la función.\\

Observe el problema que se da en el cálculo de la media, debido a los datos omitidos o perdidos,
qué propone usted para solucionar esto.

\begin{itemize}
\item Ejemplo 3: Se quiere definir una función para graficar la función seno de x. Una definición de esta función puede ser
\end{itemize}

<<>>=
Seno <- function(x)
{
y = sin(x)
plot(x, y, main="Ejemplo de gráficos en R",
xlab="x", ylab="y = Seno(x)", col="blue", pch=1)
}

@

Pruebe la función con el siguiente vector:

<<>>=
x<-seq(-pi, pi, len=100)
Seno(x)
@

\begin{figure}[H]
\begin{center}
\includegraphics[scale=0.7]{SENO.png}
\end{center}
\end{figure}

\section {EJERCICIOS PROPUESTOS}

\begin{itemize}
\item Ejercicio 1: Escriba una función para encontrar el factorial de un número mayor que cero.

<<>>=
factorial <- function(x)
{
producto<-1 
vector<-c(1:x)  
for(i in 1:x) producto = producto*vector[i]
producto
  }

@

Calcularemos el factorial de 10.

<<>>=
factorial(10)
@

\item Ejercicio 2: Escriba una función para encontrar la varianza o la cuasi-varianza de un vector de datos.\\

\begin{figure}[H]
\begin{center}
\textbf{Se usara la siguiente formula:}\\
\vspace{1cm}
\includegraphics[width=3cm, height=3cm]{varianza.jpg}
\end{center}
\end{figure}


Además se usara la función media() definida anteriormente.

<<>>=
varianza <- function(y)
{
n<-length(y)
suma<-0
prom<-media(y)
for(i in 1:n) suma = suma+(y[i]-prom)^2
suma/(n-1)
}

@

Calcularemos la varianza del siguiente vector:
<<>>=
nvector<-c(1,2,3,6,5,6,4)
varianza(nvector)
@

\item Ejercicio 3: Escriba una función para encontrar la media geométrica de un vector de datos.\\

\begin{figure}[H]
\begin{center}
\textbf{Se usara la siguiente formula:}\\
\vspace{1cm}
\includegraphics[width=3cm, height=3cm]{geometrica.png}
\end{center}
\end{figure}

<<>>=
geometrica <- function(y)
{
n<-length(y)
producto<-1
for(i in 1:n) producto = producto*y[i]
producto^(1/n)
}

@

Se calculara la media geometrica del siguiente vector:

<<>>=
vector1<-c(15,10,12,13,18)
geometrica(vector1)
@

\item Ejercicio 4: Escriba una función para encontrar la media armónica de un vector de datos.

\begin{figure}[H]
\begin{center}
\textbf{Se usara la siguiente formula:}\\
\vspace{1cm}
\includegraphics[width=3cm, height=3cm]{armonica.jpg}
\end{center}
\end{figure}

<<>>=
armonica <- function(y)
{
n<-length(y)
suma<-0
for(i in 1:n) suma = suma + 1/y[i]
n/suma
}

@

Se calculara la media armonica del siguiente vector:

<<>>=

vector2<-c(15,17,14,13,12)
armonica(vector2)
@

\end{itemize}

\end{document}
